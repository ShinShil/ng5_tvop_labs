const startProgramm: string[] = [
    'Выполните двойной клик по файлу adder.exe',
    'Ожидайте, пока программа не запустится'
];
const enter = (input): string[] => [
    `Введите ${input}`,
    `Нажмите enter`
];

const out = (result): string => `Программа выводит: ${result}`;

const count = (input1, input2, result): string[] => [
    ...enter(input1),
    ...enter(input2),
    out(result)
];

const programEndWorking = 'Программа завершает свою работу';
const pressAnyKey = 'Нажмите любую клавишу';

export const ADDER_ERRORS: ILabError[] = [
    {
        description: 'Если сумма равна 0, то программа завершается.',
        steps: [
            ...startProgramm,
            ...count(0, 0, 0),
            ...startProgramm,
            ...count('-0', '-0', 0),
            programEndWorking
        ],
        title: 'Результат равный 0 приводит к завершению программы'
    },
    {
        title: 'Программа берёт отрицательные введённые числа по модулю',
        description: 'Программа считывает отрицательные числа, но при этом при вычеслении берёт значение всех отрицательных чисел по модулю',
        steps: [
            ...startProgramm,
            ...count(-4, 4, 8),
            ...count(-4, -5, 9),
            ...count(4, 5, 9),
            ...count(4, -4, 8),
        ]
    },
    {
        title: 'При неудачной попытке считать второе слагаемое, программа завершается',
        description: 'Программа считает корректными числа от 0 до 99 включительно, например, если ввести, число 102, то программа выдаст сообщение об ошибке. Если программе удаётся распознать второе свведённое слагаемое как некорректное, то программа, после вывода сообщения об ошибке, завершается.',
        steps: [
            ...startProgramm,
            ...count(2, 102, 'Error in second number!!!'),
            pressAnyKey,
            programEndWorking
        ]
    },
    {
        title: 'Программа обрезает оставшийся ввод, после успешной попытки считать ввод',
        description: 'Во процессе считывания пользовательского ввода программа программа пробует распознать первые введённые числа. Например, в строке 123abc, первые числа - 123. В случае успеха, программа игнорирует весь оставшийся ввод. В понятие числа входят символы 0,1,2,3,4,5,,7,8,9.',
        steps: [
            ...startProgramm,
            ...count(1, '23abc', 24),
            ...count('2qw', 25, 27),
            ...count('23qw', 25, 48),
            ...count('2.5', 25, 27)
        ]
    },
    {
        title: 'Программа кеширует введённые значения и подставляет их вместо некорректного ввода',
        description: 'После каждого удачного пользовательского ввода, к которому относятся, все числа от -99 до 99 включительно, программа кэширует это значение. Изначально кажое слагаемое равно 1.',
        steps: [
            ...startProgramm,
            ...count('q', 'q', 2),
            ...count('23', 'q', 24),
            ...count('q', 'q', 24),
            ...count('w', '3', 26),
            ...count('qweqw', 'sada', 26)
        ]
    },
    {
        title: 'Программа не учитыват ситуацию, когда не занулённым оказывается единственный бит отрицания',
        description: 'Если ввести число, которое в двоичном представлении на 32 бите имеет 1, а в первых тридцати одном 0, то программа допустит ввод такого числа, значение слагаемого в этом случае равно -2147483648, что 2^31 степени, далее число подпадающее под это правило будем называть Х. При вводе второго слагаемого программа, программа руководствовуется теми же правилами. Программа высчитывает сумму для выражения в котором участвует Х, Х+Х = 0, Х + 3 = -2147483645, и т.д. ',
        steps: [
            ...startProgramm,
            ...enter('1000000000000000000000000000000'),
            out('Error in first number!!!'),
            ...count('10000000000000000000000000000000', '0', '-2147483648'),
            ...count('2147483648', '0', '-2147483648'),
            ...count('2147483648', '5', '-2147483643'),
            ...count('2147483648', '2147483648', '0'),
            programEndWorking
        ]
    },
    {
        title: 'Программа не учитывает переполнения',
        description: 'Если ввести число, у которого первые 32 бита в десятичом представлении меньше 10(в десятичной системе счисления), то программа одобрит такой ввод. В слагаемое соответсвенно запишутся первые 32 бита в десятичной системе счисления.',
        steps: [
            ...startProgramm,
            ...count('100000000000000000000000000000001', 1, 2),
            ...count('1000000000000000000000000000000012', 1, 13),
            ...count('10000000000000000000000000000000123', '0', 'Error in first number!!!'),
            ...count('214748364812', '214748364812', '24'),
            ...count('100000000000000000000000000000000', '0', '0'),
            programEndWorking
        ]
    },
    {
        title: 'Программа недружелюбным UI',
        description: ['Добавить лейблы, поясняющие вывод программы',
        'Добавить более подробное описание ошибок, с инструкцией как исправить ошибку',
        'Добавить инутрукции для пользователя, поясняющие ввод программы'
    ],
        steps: []
    }
];